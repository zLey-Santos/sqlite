export interface ValueSubscription<T> {
    name: string;
    zorm: {
        refObject: React.MutableRefObject<HTMLFormElement | undefined>;
    };
    initialValue?: T;
    event?: string;
    transform?: (value: string) => T;
}
export declare function useValue<T>(opts: ValueSubscription<T>): undefined extends T ? string : T;
export declare function Value<T>(props: ValueSubscription<T> & {
    children: (value: undefined extends T ? string : T) => any;
}): any;
//# sourceMappingURL=use-value.d.ts.map
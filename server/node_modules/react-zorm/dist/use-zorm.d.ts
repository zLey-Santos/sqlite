import { ZodType, ZodIssue, SafeParseReturnType } from "zod";
import type { Zorm } from "./types";
export interface ValidSubmitEvent<Data> {
    /**
     * Prevent the default form submission
     */
    preventDefault(): void;
    /**
     * The form HTML Element
     */
    target: HTMLFormElement;
    /**
     * Zod validated and parsed data
     */
    data: Data;
}
export interface UseZormOptions<Data extends SafeParseReturnType<any, any>> {
    /**
     * Called when the form is submitted with valid data
     */
    onValidSubmit?: (event: ValidSubmitEvent<Data>) => any;
    setupListeners?: boolean;
    customIssues?: ZodIssue[];
    onFormData?: (event: FormDataEvent) => any;
}
export declare function useZorm<Schema extends ZodType<any>>(formName: string, schema: Schema, options?: UseZormOptions<ReturnType<Schema["parse"]>>): Zorm<Schema>;
//# sourceMappingURL=use-zorm.d.ts.map
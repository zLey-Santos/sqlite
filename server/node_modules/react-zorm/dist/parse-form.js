"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeParseForm = exports.parseForm = exports.parseFormAny = void 0;
const set_in_1 = require("./set-in");
/**
 * Fix sparse array from nested objects. Puts undefineds to array holes.
 */
function fixHoles(ob) {
    if (Array.isArray(ob)) {
        const array = ob;
        for (let index = 0, length = array.length; index < length; index++) {
            if (!(index in array)) {
                array[index] = undefined;
            }
            else {
                fixHoles(array[index]);
            }
        }
    }
    if (ob === null) {
        return;
    }
    if (typeof ob === "object") {
        for (const value of Object.values(ob)) {
            fixHoles(value);
        }
    }
}
/**
 * Parse nested data from a form element or a FormData object.
 *
 * Ex. <input name="ding[0].dong" value="value" />
 *
 *     =>  { ding: [ {dong: "value"} ] }
 *
 * Inspired by Final Form. See https://8ypq7n41z0.codesandbox.io/
 */
function parseFormAny(form) {
    let data;
    if ("onsubmit" in form) {
        data = new FormData(form);
    }
    else {
        data = form;
    }
    let ret = {};
    for (const [key, value] of data.entries()) {
        ret = (0, set_in_1.setIn)(ret, key, value);
    }
    // Remove sparse arrays as Zod does not like them.
    // XXX Should probably just fix setIn() to avoid sparse arrays.
    fixHoles(ret);
    return ret;
}
exports.parseFormAny = parseFormAny;
function parseForm(schema, form) {
    return schema.parse(parseFormAny(form));
}
exports.parseForm = parseForm;
function safeParseForm(schema, form) {
    return schema.safeParse(parseFormAny(form));
}
exports.safeParseForm = safeParseForm;
//# sourceMappingURL=parse-form.js.map